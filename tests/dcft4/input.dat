#! DCFT calculation for the HF+ using DC-06 functional. This performs both
#! two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation.
#! Four-virtual integrals are first handled in the MO Basis for the first two energy computations.
#! In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for 
#! four-virtual case is avoided. 
#! The computation is then repeated using the DC-12 functional with the same algorithms.

memory 250 mb

refscf      = -98.190834079292387  #TEST
refmp2      = -98.202705508819363  #TEST
refdcftscf  = -98.164839047679820  #TEST
refdcft     = -98.2078192401319967 #TEST

# DCFT-06X                            #TEST
refdcftscfexact = -98.165972603361965 #TEST
refdcftexact = -98.207614955904603    #TEST

molecule HF {
1 2
H
F 1 R

R = 1.000
}

set globals {
    r_convergence 12
    d_convergence 12
    ao_basis    none
    algorithm   twostep
    basis       sto-3g
}

energy('dcft')

compare_values(refscf, get_variable("SCF TOTAL ENERGY"), 10, "SCF Energy");                                       #TEST
compare_values(refmp2, get_variable("MP2 TOTAL ENERGY"), 10, "MP2 Energy");                                             #TEST
compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (two-step, ao_basis=none)");     #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (two-step, ao_basis=none)");                #TEST

set algorithm simultaneous
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (simultaneous, ao_basis=none)"); #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (simultaneous, ao_basis=none)");            #TEST

set ao_basis disk
set algorithm twostep
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (two-step, ao_basis=disk)");     #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (two-step, ao_basis=disk)");                #TEST

set algorithm simultaneous
energy('dcft')

compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (simultaneous, ao_basis=disk)"); #TEST
compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (simultaneous, ao_basis=disk)");            #TEST

set algorithm qc
set ao_basis none
#energy('dcft')

#compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (quadratically-convergent, ao_basis=none)");     #TEST
#compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (quadratically-convergent, ao_basis=none)");                #TEST

set ao_basis disk
#energy('dcft')

#compare_values(refdcftscf, get_variable("DCFT SCF ENERGY"), 10, "DC-06 SCF Energy (quadratically-convergent, ao_basis=disk)");     #TEST
#compare_values(refdcft, get_variable("DCFT TOTAL ENERGY"), 10, "DC-06 Energy (quadratically-convergent, ao_basis=disk)");                #TEST

set dcft_functional dc-12
set algorithm twostep
set ao_basis none
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (two-step, ao_basis=none)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (two-step, ao_basis=none)");                #TEST

set ao_basis disk
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (two-step, ao_basis=disk)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (two-step, ao_basis=disk)");                #TEST

set algorithm simultaneous
set ao_basis none
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (simultaneous, ao_basis=none)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (simultaneous, ao_basis=none)");                #TEST

set ao_basis disk
energy('dcft')

compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (simultaneous, ao_basis=disk)");     #TEST
compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (simultaneous, ao_basis=disk)");                #TEST

set algorithm qc
set ao_basis none
#energy('dcft')

#compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (quadratically-convergent, ao_basis=none)");     #TEST
#compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (quadratically-convergent, ao_basis=none)");                #TEST

set ao_basis disk
#energy('dcft')

#compare_values(refdcftscfexact, get_variable("DCFT SCF ENERGY"), 10, "DC-12 SCF Energy (quadratically-convergent, ao_basis=disk)");     #TEST
#compare_values(refdcftexact, get_variable("DCFT TOTAL ENERGY"), 10, "DC-12 Energy (quadratically-convergent, ao_basis=disk)");                #TEST
